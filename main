-- vital --
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/heavyraining/ModifiedKavoUI/main/main"))()

local colors = {
	SchemeColor = Color3.fromRGB(46, 48, 43),
	Background = Color3.fromRGB(13, 15, 12),
	Header = Color3.fromRGB(36, 38, 35),
	TextColor = Color3.fromRGB(152, 99, 53),
	ElementColor = Color3.fromRGB(24, 24, 24)
}

local Window = Library.CreateLib("Laredo (by @therapisttt)", colors)

-- tabs --
local WeaponsTab = Window:NewTab("Weapons")
local ShopTab = Window:NewTab("Shop")
local SpyTab = Window:NewTab("Spying")
local MiscTab = Window:NewTab("Miscellaneous")
local SettingsTab = Window:NewTab("UI Settings")

-- sections --
local ItemGiverSection = WeaponsTab:NewSection("Get Item")
local WeaponModsSection = WeaponsTab:NewSection("Modify Weapon")

local ShopSection = ShopTab:NewSection("Shop")

local SpySection = SpyTab:NewSection("Monitoring")

local MiscSection = MiscTab:NewSection("Miscellaneous")
local MiscOtherScriptsSection = MiscTab:NewSection("Other Scripts")

local SettingsSection = SettingsTab:NewSection("UI Settings")
local ColourSettingsSection = SettingsTab:NewSection("Colour Settings")

-- variables --
local scriptIcon = "rbxassetid://9756596201"

local showGunsOnly = false

local spyingOnChat = false
local spyingOnModCalls = false
local monitoringAdminJoins = false

-- functions --
local function notify(title:string, text:string, duration:number, button1:string?, button2:string?)
	if button1 then
		if not button2 then
			game:GetService("StarterGui"):SetCore("SendNotification", {
				Title = title,
				Text = text,
				Icon = scriptIcon,
				Duration = duration,
				Button1 = button1
			})
		else
			game:GetService("StarterGui"):SetCore("SendNotification", {
				Title = title,
				Text = text,
				Icon = scriptIcon,
				Duration = duration,
				Button1 = button1,
				Button2 = button2
			})
		end
	else
		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = title,
			Text = text,
			Icon = scriptIcon,
			Duration = duration
		})
	end
end

local function refreshItemsDropdown(dropdown, gunsOnly:boolean?)
	local detectedWeapons = {}

	for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
		for _, item in ipairs(player.Backpack:GetChildren()) do
			if not table.find(detectedWeapons, item.Name) then
				if not gunsOnly then
					table.insert(detectedWeapons, item.Name)
				elseif item:FindFirstChild("ACS_Settings") then
					table.insert(detectedWeapons, item.Name)
				end
			end
		end
	end

	dropdown:Refresh(detectedWeapons)
end

local itemGiverDropdown = ItemGiverSection:NewDropdown("Get Item", "Gets a item from first detected players backpacks", nil, function(currentOption)
	local weaponFound = nil
	local oldOwner = nil

	for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
		if not weaponFound then
			if player ~= game:GetService("Players").LocalPlayer then
				for _, item in ipairs(player.Backpack:GetChildren()) do
					if item.Name == currentOption then
						weaponFound = item
						oldOwner = item.Parent.Parent.Name
						item.Parent = game:GetService("Players").LocalPlayer.Backpack
					end
				end
			end
		end
	end

	if weaponFound then
		notify(
			"Weapon Found",
			"We found the desired weapon in ".. oldOwner .."'s backpack.",
			3
		)
	else
		notify(
			"Weapon Found",
			"We couldn't find the weapon anywhere",
			2
		)
	end
end)

refreshItemsDropdown(itemGiverDropdown, false) -- first tick

ItemGiverSection:NewToggle("Show Guns Only", "ToggleInfo", function(state)
	showGunsOnly = state
	refreshItemsDropdown(itemGiverDropdown, state)
end)

ItemGiverSection:NewButton("Refresh Give Weapons List", "Refreshes list of weapons above", function()
	refreshItemsDropdown(itemGiverDropdown, showGunsOnly)
	notify("Refreshed Items List", "The items list is now up-to-date.", 3, "Okay.")
end)

ShopSection:NewButton("Open Cartel Shop", "Opens illegal weapon dealer", function()
	game.Players.LocalPlayer.PlayerGui.UserInterface.GunDealer.Illegal.Visible = true
end)

ShopSection:NewButton("Open Hardware Shop", "Only for drill", function()
	game.Players.LocalPlayer.PlayerGui.UserInterface.GunDealer.Hardware.Visible = true
end)

WeaponModsSection:NewButton("Infinite Ammo Reserves", "Gives all weapons in inventory infinite reserve magazines", function()
	local gunsDetected = 0
	for _, tool in ipairs(game:GetService("Players").LocalPlayer.Backpack:GetChildren()) do
		if tool:FindFirstChild("RepValues") then
			gunsDetected = gunsDetected + 1
			tool.RepValues.StoredAmmo.Value = 9999999999999
		end
	end

	if gunsDetected > 0 then
		notify("Finished", "Modified "..gunsDetected.." guns in your backpack.", 3, "Thanks?..")
	else
		notify("No Guns In Inventory", "Please note that you have to equip the guns you wanna modify at least once and then press this.", 3, "Okay...")
	end
end)

WeaponModsSection:NewButton("Infinite Magazines", "Gives the held weapons magazine infinite bullets", function()
	local gunsDetected = 0
	for _, tool in ipairs(game:GetService("Players").LocalPlayer.Backpack:GetChildren()) do
		if tool:FindFirstChild("RepValues") then
			gunsDetected = gunsDetected + 1
			tool.RepValues.Mag.Value = 9999999999999
		end
	end

	if gunsDetected > 0 then
		notify("Finished", "Modified "..gunsDetected.." guns in your backpack.", 3, "Thanks?..")
	else
		notify("No Guns In Inventory", "Please note that you have to equip the guns you wanna modify at least once and then press this.", 3, "Okay...")
	end
end)

-- spy subsection --
local function separateTable(tbl)
	local str = ""
	for i, v in ipairs(tbl) do
		str = str .. v.Name
		if i < #tbl then
			str = str .. ", "
		end
	end

	return str
end

local function scanForAdmin(specificPlayer:Player?) -- optional, leave blank to return a table of all admins in the server
	if not specificPlayer then -- returns a table of all the admins
		local detectedAdmins = {}

		for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
			if player:IsInGroup(6550041) then
				if player:GetRankInGroup(6550041) > 5 then -- player is at least a trial moderator
					table.insert(detectedAdmins, player)
				end
			end
		end

		return detectedAdmins
	elseif specificPlayer:IsA("Player") then -- makes sure its a player
		if specificPlayer:IsInGroup(6550041) then
			if specificPlayer:GetRankInGroup(6550041) > 5 then -- player is at least a trial moderator
				return true
			end
		end
	end

	return false -- failsafe
end

local function checkIfHelpRequest(message) -- checks if the message is "!help" to notify player whenever someone called for admins
	if string.sub(message, 1, 5) == "!help" then
		return true
	else
		return false
	end
end

local function auditPlayer(player:Player)
	player.Chatted:Connect(function(message)
		if spyingOnChat then
			if not checkIfHelpRequest(message) then
				if scanForAdmin(player) then -- adds a tag that says (MOD) if its a mod speaking
					print("(MODERATOR) " .. player.Name .. ": " .. message)
				else
					print(player.Name .. ": " .. message)
				end
			else
				local adminsPresent = scanForAdmin()

				if #adminsPresent > 0 then
					notify("ADMINS CALLED!", string.upper(player.Name) .. " CALLED FOR A MODERATOR!", 5, "Let's hope it's not for me.")
				else
					notify("No Moderators Present", player.Name .. " called for a moderator but none are online right now.", 5, "Hah!")
				end
			end
		end
	end)
end

game:GetService("Players").PlayerAdded:Connect(function(player) -- alerts if admin joins and monitors when the player spea
	if monitoringAdminJoins then
		if scanForAdmin(player) then
			notify(
				"MODERATOR JOINED",
				"A moderator by the name of " .. player.Name .. " has joined the server!",
				10,
				"Wonderful..."
			)
		end
	end
	
	auditPlayer(player)
end)

for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
	auditPlayer(player)
end

if #scanForAdmin() > 0 then
	notify("ADMINS ARE PRESENT", separateTable(scanForAdmin()), 10, "Good to know.")
else
	notify("No Admins Present", "You're in the clear buddy, no one's here to stop you.", 3, "Good.")
end

local chatFrame = game.Players.LocalPlayer.PlayerGui.Chat.Frame
local chatSpyCodeRan = false
local oldTextBoxPosition = chatFrame.ChatChannelParentFrame.Position
SpySection:NewToggle("Chat Spy (by dehoisted)", "Credits to dehoisted on github", function(state)
	chatSpyCodeRan = state
	spyingOnChat = state
	
	if state then
		if not chatSpyCodeRan then
			loadstring(game:HttpGet('https://raw.githubusercontent.com/dehoisted/Chat-Spy/main/source/main.lua'))()
			notify("Logging Chat", "ChatSpy was made by dehoisted on github.", 5, "Understood.")
		else
			chatFrame.ChatBarParentFrame.Position = chatFrame.ChatChannelParentFrame.Position + UDim2.new(UDim.new(),chatFrame.ChatChannelParentFrame.Size.Y)
			chatFrame.ChatChannelParentFrame.Visible = true
			notify("Logging Chat", "ChatSpy re-enabled", 3, "Understood.")
		end
	else
		chatFrame.ChatBarParentFrame.Position = oldTextBoxPosition
		game.Players.LocalPlayer.PlayerGui.Chat.Frame.ChatChannelParentFrame.Visible = false
		notify("Not Logging", "The chat will not be logged in console anymore.", 3, "Okay...")
	end
end)

SpySection:NewToggle("Monitor Calls for Moderators", "Alerts you if someone called for an administrator.", function(state)
	spyingOnModCalls = state

	if state then
		notify("Logging Mod Requests", "When anyone calls for a moderator, you will be notified like this.", 5, "Understood.")
	else
		notify("Not Logging", "Moderator requests will no longer alert you.", 10, "Okay...")
	end
end)

SpySection:NewToggle("Check for Moderators", "Alerts you if a moderator joins or is already present in the server.", function(state)
	monitoringAdminJoins = state

	if state then
		notify("Checking for Moderators", "When a moderator joins your server, you will be notified like this.", 5, "Understood.")
	else
		notify("No Longer Checking For Mods", "Moderators joining will no longer alert you.", 3, "Okay...")
	end
end)
--

local proxConnection = nil
local originalHoldDurations = {}
MiscSection:NewToggle("Instant Proximity Prompts", "Makes all proximity prompts instant", function(state)
	if state then
		for _, descendant in ipairs(game.Workspace:GetDescendants()) do
			if descendant:IsA("ProximityPrompt") then
				originalHoldDurations[descendant] = descendant.HoldDuration
				descendant.HoldDuration = 0
			end
		end

		proxConnection = game:GetService("Workspace").DescendantAdded:Connect(function(descendant)
			if descendant:IsA("ProximityPrompt") then
				originalHoldDurations[descendant] = descendant.HoldDuration
				descendant.HoldDuration = 0
			end
		end)

		notify("Running", "All proximity prompts are now instant.", 3, "Okay.")
	else
		proxConnection:Disconnect()
		for prompt, duration in pairs(originalHoldDurations) do
			if prompt and prompt:IsA("ProximityPrompt") then
				prompt.HoldDuration = duration
			end
		end
		originalHoldDurations = {}

		notify("Disabled", "Proximity prompts will no longer be instant.", 3, "Fine.")
	end
end)

MiscOtherScriptsSection:NewButton("Infinite Yield", "Runs Infinite Yield", function()
	loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
end)

SettingsSection:NewKeybind("Toggle UI Keybind", "Default key is RightShift", Enum.KeyCode.RightShift, function()
	Library:ToggleUI()
end)

for theme, color in pairs(colors) do
	ColourSettingsSection:NewColorPicker(theme, "Change your "..theme, color, function(color3)
		Library:ChangeColor(theme, color3)
	end)
end
